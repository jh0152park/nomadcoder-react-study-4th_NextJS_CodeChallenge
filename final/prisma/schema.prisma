generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  email         String          @unique
  username      String          @unique
  password      String
  description   String          @default("")
  profile_image String?         @default("https://pbs.twimg.com/profile_images/923557898218889216/g4BH7Arj.jpg")
  Like          Like[]
  Comment       Comment[]
  Message       Message[]
  sendDM        DirectMessage[] @relation("sender")
  reveiveDM     DirectMessage[] @relation("receiver")
  Post          Post[]
}

model Like {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  Post   Post[]
}

model Comment {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  comment String
  user    User   @relation(fields: [userId], references: [id])
  userId  Int
  Post    Post[]
}

model Post {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  payload   String
  like      Like    @relation(fields: [likeId], references: [id], onDelete: Cascade)
  likeId    Int
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
}

model Message {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  message String
  user    User   @relation(fields: [userId], references: [id])
  userId  Int
}

model DirectMessage {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  sender   User @relation(fields: [senderId], references: [id], onDelete: Cascade, name: "sender")
  senderId Int

  receiver   User @relation(fields: [receiverId], references: [id], onDelete: Cascade, name: "receiver")
  receiverId Int
}
